# Automatic generated by the runner, do not edit.
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.pyplot import MultipleLocator
plt.figure(figsize=(20, 12))
plt.xlabel('Matrix Size N (for NxN matrices)')
plt.ylabel('Performance (GFLOPs/s)')
plt.title('SGEMM Performance Comparison')
plt.grid(True)
x_major_locator = MultipleLocator(256)
plt.gca().xaxis.set_major_locator(x_major_locator)
# Automatically generated by the runner, do not edit.
# Run kernel: cuBlas Implementation
plt.plot(
[256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120],[0.917479,906.214,1687.47,2099.76,2562.5,2595.27,2711.89,2749.18,2765.97,2843.65,3193,3278.19,4762.47,6269.94,6378.81,6420.17,6175.01,6085.72,6012.21,6058.5],label="cuBlas Implementation",marker='.')
# Automatically generated by the runner, do not edit.
# Run kernel: Naive Implementation
plt.plot(
[256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120],[24.7814,56.2416,61.0348,60.6677,61.5003,61.1945,61.3427,61.86,61.7012,61.863,61.8682,61.9049,61.8003,61.7693,61.7584,61.9526,61.7722,61.5165,60.7643,60.2945],label="Naive Implementation",marker='o')
# Automatically generated by the runner, do not edit.
# Run kernel: Global Memory Coalescing
plt.plot(
[256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120],[616.057,807.323,843.923,827.393,791.911,710.48,624.453,611.172,593.891,590.91,583.677,581.832,578.239,578.822,557.343,564.067,563.732,567.591,561.093,563.284],label="Global Memory Coalescing",marker='v')
# Automatically generated by the runner, do not edit.
# Run kernel: Shared Memory Cache-Blocking
plt.plot(
[256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120],[727.781,1013.25,1061.22,1061.72,1072.61,1061.67,1008.04,996.064,964.347,951.602,950.641,948.4,941.778,941.452,943.143,954.78,933.336,920.725,922.217,919.863],label="Shared Memory Cache-Blocking",marker='^')
# Automatically generated by the runner, do not edit.
# Run kernel: 1D Tiling
plt.plot(
[256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120],[879.92,1891,2106.1,2091.54,2235.71,2222.16,2238.83,2235.16,2171.39,2138.93,2069.96,2055.21,2035.18,2025.86,2027.75,2042.79,2010.85,2013.01,2001.11,1995.35],label="1D Tiling",marker='<')
# Automatically generated by the runner, do not edit.
# Run kernel: 2D Tiling
plt.plot(
[256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120],[410.496,1852.7,3575.48,3570.83,3787.72,4176.6,4603.83,4417.05,4328.43,4664.51,4202.35,4073.69,3972.48,3783.85,3723.9,3805.5,3633.64,3633.11,3567.56,3553.57],label="2D Tiling",marker='>')
plt.legend()
plt.savefig("2025-04-27-14:50:45.png")
