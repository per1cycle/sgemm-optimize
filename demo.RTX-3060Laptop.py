# Automatic generated by the runner, do not edit.
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.pyplot import MultipleLocator
plt.figure(figsize=(20, 12))
plt.xlabel('Matrix Size N (for NxN matrices)')
plt.ylabel('Performance (GFLOPs/s)')
plt.title('SGEMM Performance Comparison')
plt.grid(True)
x_major_locator = MultipleLocator(256)
plt.gca().xaxis.set_major_locator(x_major_locator)
# Automatically generated by the runner, do not edit.
# Run kernel: cuBlas Implementation
plt.plot(
[256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120],[3.06427,364.666,1018.33,1996.81,2994.51,3911.13,4398.48,4849.16,5207.75,5539.78,6759.99,6426.12,6455.69,6789.29,8231.06,7296.89,7239.17,7342.22,7317.31,7256.17],label="cuBlas Implementation",marker='.')
# Automatically generated by the runner, do not edit.
# Run kernel: Naive Implementation
plt.plot(
[256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120],[18.6126,100.423,107.844,111.38,109.527,112.173,112.718,113.686,112.763,111.292,113.213,112.412,113.217,113.397,112.035,113.821,105.843,109.235,110.829,107.562],label="Naive Implementation",marker='o')
# Automatically generated by the runner, do not edit.
# Run kernel: Global Memory Coalescing
plt.plot(
[256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120],[389.755,813.423,849.541,814.108,772.787,709.991,740.793,793.12,774.909,803.267,788.757,787.776,781.226,787.422,781.576,765.543,753.82,760.302,770.712,761.96],label="Global Memory Coalescing",marker='v')
# Automatically generated by the runner, do not edit.
# Run kernel: Shared Memory Cache-Blocking
plt.plot(
[256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120],[477.339,958.298,997.865,970.46,1051.09,1091.37,1105.58,1088.52,1110.48,1095.24,1106.27,1102.88,1101.36,1104.4,1109.41,1106.56,1107.19,1106.74,1100.75,1106.94],label="Shared Memory Cache-Blocking",marker='^')
# Automatically generated by the runner, do not edit.
# Run kernel: 1D Tiling
plt.plot(
[256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120],[510.805,2040.83,2889.05,3102.81,3160.28,3220.33,3250.15,3130.71,3172.3,3268.74,3163.66,3237.47,3141.72,3229.6,3227.65,3216.14,3204.23,3188.9,3202.21,3185.56],label="1D Tiling",marker='<')
# Automatically generated by the runner, do not edit.
# Run kernel: 2D Tiling
plt.plot(
[256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120],[291.096,2037.76,3327.22,3709.85,4828.02,5590.09,5517.62,5627.67,5826,5576.71,6001.07,5882.69,5954.23,5802.68,5031.04,5775.55,5875.04,5792.75,5753.3,5843.06],label="2D Tiling",marker='>')
plt.legend()
plt.savefig("2025-04-28-16:02:41.png")
