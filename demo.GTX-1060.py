# Automatic generated by the runner, do not edit.
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.pyplot import MultipleLocator
plt.figure(figsize=(20, 12))
plt.xlabel('Matrix Size N (for NxN matrices)')
plt.ylabel('Performance (GFLOPs/s)')
plt.title('SGEMM Performance Comparison')
plt.grid(True)
x_major_locator = MultipleLocator(256)
plt.gca().xaxis.set_major_locator(x_major_locator)
# Automatically generated by the runner, do not edit.
# Run kernel: cuBlas Implementation
plt.plot(
[256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120],[9.96525,272.046,1961.34,2345.08,2193.08,2831.33,3018.06,3395.21,3359.37,3829.72,3820.88,3896.63,3699.49,3829.28,3908.64,3836.63,3854.6,3829.08,3775.52,3813.08],label="cuBlas Implementation",marker='.')
# Automatically generated by the runner, do not edit.
# Run kernel: Naive Implementation
plt.plot(
[256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120],[24.6855,35.2429,34.4121,35.3973,35.3856,35.0288,35.2636,35.3328,33.6968,34.5186,33.6502,33.5139,32.7231,32.0391,30.8373,31.2718,29.0497,27.9129,26.9265,26.515],label="Naive Implementation",marker='o')
# Automatically generated by the runner, do not edit.
# Run kernel: Global Memory Coalescing
plt.plot(
[256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120],[225.127,267.092,217.002,213.658,211.255,214.358,215.374,218.852,217.225,215.433,213.808,212.172,212.897,212.623,210.677,208.754,208.589,210.542,206.539,208.199],label="Global Memory Coalescing",marker='v')
# Automatically generated by the runner, do not edit.
# Run kernel: Shared Memory Cache-Blocking
plt.plot(
[256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120],[503.703,596.626,587.718,592.382,597.66,621.195,622.261,624.207,623.023,623.34,621.557,623.259,622.991,623.688,621.4,624.279,621.55,622.365,607.211,622.362],label="Shared Memory Cache-Blocking",marker='^')
# Automatically generated by the runner, do not edit.
# Run kernel: 1D Tiling
plt.plot(
[256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120],[825.054,937.331,1026.2,1136.64,1145.03,1118.82,1114.51,1153.02,1118.43,1138.78,1118.62,1123.78,1115.58,1125.93,1115.52,1179.23,1114.73,1123.13,1106.21,1147.15],label="1D Tiling",marker='<')
# Automatically generated by the runner, do not edit.
# Run kernel: 2D Tiling
plt.plot(
[256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120],[587.269,1788.46,2133.35,2121.91,2445.79,2288.24,2373.41,2516.84,2208.57,2278.73,2208.48,2268.86,2269.79,2250.93,2279.67,2548.4,2219.52,2276.63,2254.06,2289.12],label="2D Tiling",marker='>')
plt.legend()
plt.savefig("2025-04-27-22:40:02.png")
